/*
  Noto_Sans_Regular_32
  Datacute Proportional Font
  10 characters: 0x30 48 0 to 0x39 57 9
  Width: typically 19 pixels wide including 5 pixel spacing between characters
  Height: 23 pixels, 3 pages (bottom 1 rows are always blank)
  Total bytes: 142 * 3 + 10 + 1 * 2 + 11 = 449

  Converted by Datacute Font Converter
  Source Information:
    Font Family: Noto Sans
    Typeface: Regular
    Manufacturer: Monotype Imaging Inc.
    Description: Designed by Monotype design team
    Version: Version 1.04
    Vendor URL: http://code.google.com/p/noto/
    Trademark: Noto is a trademark of Google Inc. and may be registered in certain jurisdictions.
    Copyright: Copyright 2012 Google Inc. All Rights Reserved.
    Licence: Licensed under the Apache License, Version 2.0


  To use:

#include "Noto_Sans_Regular_32_0030_0039_19x23.h"
const DCfont *currentFont = FONTNOTO_SANS_REGULAR_32_0030_0039;

However, this font was created as a portion of a unicode font, see Noto_Sans_Regular_32_Unicode.h
*/

#include <avr/pgmspace.h>
const uint8_t ssd1306xled_fontspleen [] PROGMEM = {
       0x00, 
0x00, 
0x00, 
0x60, 
0x60, 
0x00,  // char .
     0xff, 
0xff, 
0x00, 
0x00, 
0x00, 
0x00, 
0x00, 
0x00, 
0xff, 
0xff, 
0x00, 
0x7f, 
0x7f, 
0x30, 
0x18, 
0x0c, 
0x0c, 
0x18, 
0x30, 
0x7f, 
0x7f, 
0x00,  // char /
     0xfc, 
0xfe, 
0x03, 
0x01, 
0x81, 
0xc1, 
0x61, 
0x33, 
0xfe, 
0xfc, 
0x00, 
0x1f, 
0x3f, 
0x66, 
0x43, 
0x41, 
0x40, 
0x40, 
0x60, 
0x3f, 
0x1f, 
0x00,  // char 0
     0x00, 
0x0c, 
0x06, 
0x03, 
0xff, 
0xff, 
0x00, 
0x00, 
0x00, 
0x00, 
0x00, 
0x00, 
0x40, 
0x40, 
0x40, 
0x7f, 
0x7f, 
0x40, 
0x40, 
0x40, 
0x00, 
0x00,  // char 1
     0x04, 
0x06, 
0x03, 
0x01, 
0x01, 
0x01, 
0x81, 
0xc3, 
0x7e, 
0x3c, 
0x00, 
0x60, 
0x70, 
0x58, 
0x4c, 
0x46, 
0x43, 
0x41, 
0x40, 
0x60, 
0x60, 
0x00,  // char 2
     0x04, 
0x06, 
0x03, 
0x41, 
0x41, 
0x41, 
0x41, 
0xe3, 
0xbe, 
0x1c, 
0x00, 
0x10, 
0x30, 
0x60, 
0x40, 
0x40, 
0x40, 
0x40, 
0x60, 
0x3f, 
0x1f, 
0x00,  // char 3
     0xff, 
0xff, 
0x00, 
0x00, 
0x00, 
0x00, 
0xf8, 
0xf8, 
0x00, 
0x00, 
0x00, 
0x07, 
0x07, 
0x04, 
0x04, 
0x04, 
0x04, 
0x7f, 
0x7f, 
0x04, 
0x04, 
0x00,  // char 4
     0x7f, 
0x7f, 
0x41, 
0x41, 
0x41, 
0x41, 
0x41, 
0xc1, 
0x83, 
0x03, 
0x00, 
0x10, 
0x30, 
0x60, 
0x40, 
0x40, 
0x40, 
0x40, 
0x60, 
0x3f, 
0x1f, 
0x00,  // char 5
     0xfc, 
0xfe, 
0x43, 
0x41, 
0x41, 
0x41, 
0x41, 
0xc1, 
0x83, 
0x02, 
0x00, 
0x1f, 
0x3f, 
0x60, 
0x40, 
0x40, 
0x40, 
0x40, 
0x60, 
0x3f, 
0x1f, 
0x00,  // char 6
     0x03, 
0x03, 
0x01, 
0x01, 
0x01, 
0x81, 
0xc1, 
0x61, 
0x3f, 
0x1f, 
0x00, 
0x00, 
0x00, 
0x00, 
0x7e, 
0x7f, 
0x01, 
0x00, 
0x00, 
0x00, 
0x00, 
0x00,  // char 7
     0x1c, 
0xbe, 
0xe3, 
0x41, 
0x41, 
0x41, 
0x41, 
0xe3, 
0xbe, 
0x1c, 
0x00, 
0x1f, 
0x3f, 
0x60, 
0x40, 
0x40, 
0x40, 
0x40, 
0x60, 
0x3f, 
0x1f, 
0x00,  // char 8
     0x7c, 
0xfe, 
0x83, 
0x01, 
0x01, 
0x01, 
0x01, 
0x03, 
0xfe, 
0xfc, 
0x00, 
0x20, 
0x60, 
0x41, 
0x41, 
0x41, 
0x41, 
0x41, 
0x61, 
0x3f, 
0x1f, 
0x00  // char 9
};
const uint8_t TinyOLEDFontspleen_widths [] PROGMEM = {
  3,11,11,11,11,11,11,11,11,11,11,11
  };

const uint16_t TinyOLEDFontspleen_widths_16s [] PROGMEM = {
  3+11+11+11+11+11+11+11+11+11+11+11
  };
const DCfont TinyOLEDFontspleen = {
  (uint8_t *)ssd1306xled_fontspleen,
  0, // character width in pixels 0 for proportional fonts
  2, // character height in pages (8 pixels)
  46,57, // first and last low byte defining range of included character codepoints
  (uint16_t *)TinyOLEDFontspleen_widths_16s,
  (uint8_t *)TinyOLEDFontspleen_widths,
  0 // spacing
  };
#define FONTspleen (&TinyOLEDFontspleen)
